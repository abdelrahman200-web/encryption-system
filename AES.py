import copy

s_box = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]

inv_s_box = [
    [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
    [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
    [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
    [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
    [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
    [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
    [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
    [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
    [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
    [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
    [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
    [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
    [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
    [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
    [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]
]

rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]


def xtime(a):
    return ((a << 1) ^ 0x1B) & 0xFF if a & 0x80 else a << 1

def mul(a, b):
    p = 0
    for i in range(8):
        if b & 1:
            p ^= a
        hi_bit_set = a & 0x80
        a = (a << 1) & 0xFF
        if hi_bit_set:
            a ^= 0x1B
        b >>= 1
    return p

def bytes_to_matrix(b):
    return [list(b[i:i+4]) for i in range(0, len(b), 4)]

def matrix_to_bytes(m):
    return bytes(sum(m, []))

# -- Core AES Transformations --

def sub_bytes(state):
    for i in range(4):
        for j in range(4):
            byte = state[i][j]
            state[i][j] = s_box[byte >> 4][byte & 0x0F]
    return state

def inv_sub_bytes(state):
    for i in range(4):
        for j in range(4):
            byte = state[i][j]
            state[i][j] = inv_s_box[byte >> 4][byte & 0x0F]
    return state

def shift_rows(state):
    for i in range(1, 4):
        state[i] = state[i][i:] + state[i][:i]
    return state

def inv_shift_rows(state):
    for i in range(1, 4):
        state[i] = state[i][-i:] + state[i][:-i]
    return state

def mix_columns(state):
    for i in range(4):
        a = state[0][i]
        b = state[1][i]
        c = state[2][i]
        d = state[3][i]
        state[0][i] = mul(a,2)^mul(b,3)^c^d
        state[1][i] = a^mul(b,2)^mul(c,3)^d
        state[2][i] = a^b^mul(c,2)^mul(d,3)
        state[3][i] = mul(a,3)^b^c^mul(d,2)
    return state

def inv_mix_columns(state):
    for i in range(4):
        a = state[0][i]
        b = state[1][i]
        c = state[2][i]
        d = state[3][i]
        state[0][i] = mul(a,14)^mul(b,11)^mul(c,13)^mul(d,9)
        state[1][i] = mul(a,9)^mul(b,14)^mul(c,11)^mul(d,13)
        state[2][i] = mul(a,13)^mul(b,9)^mul(c,14)^mul(d,11)
        state[3][i] = mul(a,11)^mul(b,13)^mul(c,9)^mul(d,14)
    return state

def add_round_key(state, round_key):
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i][j]
    return state

def key_expansion(key):
    key_columns = [list(key[i:i + 4]) for i in range(0, 32, 4)]
    i = 8
    while len(key_columns) < 4 * (14 + 1):
        temp = copy.copy(key_columns[-1])
        if i % 8 == 0:
            temp = [s_box[temp[1] >> 4][temp[1] & 0x0F],
                    s_box[temp[2] >> 4][temp[2] & 0x0F],
                    s_box[temp[3] >> 4][temp[3] & 0x0F],
                    s_box[temp[0] >> 4][temp[0] & 0x0F]]
            temp[0] ^= rcon[i // 8 - 1]
        elif i % 8 == 4:
            temp = [s_box[b >> 4][b & 0x0F] for b in temp]
        new_col = [a ^ b for a, b in zip(key_columns[-8], temp)]
        key_columns.append(new_col)
        i += 1
    return [key_columns[i:i + 4] for i in range(0, len(key_columns), 4)]


def encrypt_block(block, round_keys):
    state = bytes_to_matrix(block)
    state = add_round_key(state, round_keys[0])
    for rnd in range(1, 14):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[rnd])
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[14])
    return matrix_to_bytes(state)

def decrypt_block(block, round_keys):
    state = bytes_to_matrix(block)
    state = add_round_key(state, round_keys[14])
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)
    for rnd in range(13, 0, -1):
        state = add_round_key(state, round_keys[rnd])
        state = inv_mix_columns(state)
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
    state = add_round_key(state, round_keys[0])
    return matrix_to_bytes(state)

# -- Padding Helpers --

def pad(data):
    pad_len = 16 - (len(data) % 16)
    return data + bytes([pad_len] * pad_len)

def unpad(data):
    pad_len = data[-1]
    if not 1 <= pad_len <= 16:
        raise ValueError("Invalid padding.")
    return data[:-pad_len]

# -- AES ECB Mode Encrypt/Decrypt --

def aes_256_encrypt_ecb(plaintext, key_256bit):
    print("Key length:", len(key_256bit))

    assert len(key_256bit) == 32
    round_keys = key_expansion(key_256bit)
    plaintext = pad(plaintext)
    ciphertext = b''
    for i in range(0, len(plaintext), 16):
        ciphertext += encrypt_block(plaintext[i:i+16], round_keys)
    return ciphertext

def aes_256_decrypt_ecb(ciphertext, key_256bit):
    assert len(key_256bit) == 32
    round_keys = key_expansion(key_256bit)
    decrypted = b''
    for i in range(0, len(ciphertext), 16):
        decrypted += decrypt_block(ciphertext[i:i+16], round_keys)
    return unpad(decrypted)


# new 
def aes_256_encrypt_cfb(plaintext, key, iv):
    assert len(iv) == 16, "IV must be 16 bytes."
    assert len(key) == 32, "Key must be 32 bytes for AES-256."

    key_schedule = key_expansion(key)
    ciphertext = b""
    previous = iv

    for i in range(0, len(plaintext), 16):
        block = plaintext[i:i+16]
        encrypted_iv = encrypt_block(previous, key_schedule)
        cipher_block = bytes([b ^ e for b, e in zip(block, encrypted_iv[:len(block)])])
        ciphertext += cipher_block
        previous = cipher_block  # feedback

    return ciphertext


def aes_256_decrypt_cfb(ciphertext, key, iv):
    """Decrypt ciphertext using AES-256 in CFB mode."""
    assert len(iv) == 16, "IV must be 16 bytes."
    assert len(key) == 32, "Key must be 32 bytes for AES-256."

    key_schedule = key_expansion(key)
    plaintext = b""
    previous = iv

    for i in range(0, len(ciphertext), 16):
        block = ciphertext[i:i+16]
        encrypted_iv = encrypt_block(previous, key_schedule)
        plain_block = bytes([b ^ e for b, e in zip(block, encrypted_iv[:len(block)])])
        plaintext += plain_block
        previous = block  # feedback

    return plaintext

# test teh AES ECB encrypt mode 
key = b'ThisIsA32ByteLongSecretKeyFAES!!'
plaintext = b"hello abdelrahman nice to meet you please meet me at 7 pm i want talk with you about something !"
print("Plaintext:", plaintext)

ciphertext = aes_256_encrypt_ecb(plaintext, key)
print("Encrypted (hex):", ciphertext.hex())

decrypted = aes_256_decrypt_ecb(ciphertext, key)
print("Decrypted:", decrypted)

# test the AES CFB encrypt mode 
key = b"0123456789ABCDEF0123456789ABCDEF"  
iv = b"1234567890ABCDEF"                  
plaintext = b"hello abdelrahman nice to meet you"  

# Encrypt
ciphertext = aes_256_encrypt_cfb(plaintext, key, iv)
print("Ciphertext (hex):", ciphertext.hex())

# Decrypt
decrypted = aes_256_decrypt_cfb(ciphertext, key, iv)
print("Decrypted text:", decrypted.decode())

